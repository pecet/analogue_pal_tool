use crate::palette::AsAnsiType;
use clap::{command, Parser, Subcommand};

#[derive(Parser, Debug)]
#[command(author, version = env!("GIT_HASH"), about)]
pub struct Cli {
    #[command(subcommand)]
    pub command: Commands,
}

#[derive(Subcommand, Debug)]
pub enum Commands {
    /// Display palette as ANSI colored string.
    /// Requires 24-bit color support in terminal.
    #[clap(aliases = ["d", "show"])]
    Display {
        #[clap(short, long, default_value_t, value_enum)]
        display_type: AsAnsiType,
        /// Name / path to .pal file to read
        pal_file_name: String,
    },
    /// Create template pal file which will be used for previews.
    ///
    /// After generating such .pal and loading it on your Analogue Pocket
    /// create screenshots with it, then these screenshots can be used
    /// to preview other palettes.
    #[clap(aliases = ["t", "template"])]
    CreateTemplatePal {
        #[clap(short, long = "output", required = true)]
        /// Name / path to .pal file to write
        output_pal_file: String,
    },
    /// Colorize input screenshot .png file using palette provided and save as new image file
    #[clap(aliases = ["c", "color-image", "color", "colorize"])]
    ColorizeImage {
        /// Name / path to .pal file to read
        pal_file_name: String,
        /// Name / path to input screenshot(s) .png file(s) to read
        ///
        /// Screenshot(s) MUST be created using palette generated by create-template-pal
        #[clap(required = true)]
        input_image_files: Vec<String>,
        /// Name / path to .png file to write
        ///
        /// If multiple input images are provided then output will be used as a prefix
        /// and images with counter e.g.: out000.png out001.png etc. will be created
        #[clap(short, long = "output", required = true)]
        output_image_file: String,
        /// Scale factor to apply for output image, only integer values are supported
        ///
        /// If not supplied no scaling is applied
        #[clap(short = 's', long = "scale")]
        scale: Option<u8>,
    },
}
